### From "http://www.bio-info-trainee.com/3409.html"
## 1.Install soma R packages:
# data packages:ALL, CLL, pasilla, airway 
# software packages: limma，DESeq2，clusterProfiler 
# tool packages: reshape2
# drawing package: ggplot2
rm(list=ls())
BiocManager::install("ALL")
BiocManager::install("CLL")
BiocManager::install("pasilla")
BiocManager::install("airway")
BiocManager::install("limma")
BiocManager::install("DESeq2")
BiocManager::install("clusterProfiler")
BiocManager::install("reshape2")
BiocManager::install("ggplot2")
BiocManager::install("psych")
library(ALL)
library(CLL)
library(pasilla)
library(airway)
library(limma)
library(DESeq2)
library(clusterProfiler)
library(reshape2)
library(ggplot2)
library(psych)

## 2. Review CLL and make expression matrix and group matrix and contrast matrix from CLL
data("sCLLex")
# expression matrix
exprSet=exprs(sCLLex)
dim(exprSet)
boxplot(exprSet)
pdata=pData(sCLLex)
group_list=as.character(pdata[,2])
# group matrix
design <- model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
View(design)
# contrast matrix
contrast.matrix<-makeContrasts(paste0(unique(group_list),collapse = "-"),levels = design)
View(contrast.matrix)
# the case above has only two groups, if there are more two groups, we should do as the below
group_list = c('A', 'A', 'A', 'B','B','B','C','C','C')
design <- model.matrix(~ 0+factor(group_list))
contrast.matrix <- makeContrasts(group2-group1, group3-group2, group3-group1, levels=design)
colnames(design) <- c("group1", "group2", "group3")
rownames(design) <- colnames(exprSet)
contrast.matrix <- makeContrasts(group2-group1, group3-group2, group3-group1, levels=design)

## 3.install hgu95av2.db and find the probe that corrosponds to gene TP53
BiocManager::install("hgu95av2.db")
library(hgu95av2.db)
ls("package:hgu95av2.db")
# extract the content with SYMBOL
ids=toTable(hgu95av2SYMBOL)
# find the probe that corrosponds to gene TP53
ids[grep('^TP53$',ids$symbol),]
subset(ids, ids$symbo=="TP53")

## 4. Explore relationships between genes and probes in ids
length(unique(ids$symbol))
table(table(ids$symbol) > 1)

## 5. Count how many probes in exprSet has no cprrosponning SYMBOL in ids, and filter them 
table(rownames(exprSet)%in% ids$probe_id)
dim(exprSet)
exprSet = exprSet[(rownames(exprSet)%in% ids$probe_id),]
dim(exprSet)
 
## 6. combine the expression matrix and ids
# method one:
tmp = by(exprSet,ids$symbol, function(x) rownames(x)[which.max(rowMeans(x))])
probes = as.character(tmp) 
exprSet = exprSet[rownames(exprSet) %in% probes ,]
rownames(exprSet)=ids[match(rownames(exprSet),ids$probe_id),2]
# method two
identical((ids$probe_id,rownames(exprSet))
experSet1 = experSet
ids$median = apply(exprSet1, 1, median)
ids = ids[order(ids$symbol,ids$median, decreasing = T),]
ids = ids[!duplicated(ids$symbol),]
rownames(exprSet)=ids[match(rownames(exprSet),ids$probe_id),2]

## 7.Common explroation of expression matrix
# transform the expresion matrix to long matrix
exprSet_L = melt(exprSet)
colnames(exprSet_L)=c('probe','sample','value')
# Boxplot
BOX=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot
print(BOX)
# Histogram
HIST=ggplot(exprSet_L,aes(value,fill=group))+geom_histogram(bins = 200)+facet_wrap(~sample, nrow = 4)
print(HIST)
# Dentisy plot
DENSI=ggplot(exprSet_L,aes(value,col=group))+geom_density()+facet_wrap(~sample, nrow = 4)
print(DENSI)

## 8. Caculate the statistics criteria of mean,median,max,min,sd,var and mad of each genes in all samples, then order genes by mad 
      value and extract the top 50 genes expression matrix
g_mean=sort(apply(exprSet,1,mean))
g_meadian=sort(apply(exprSet,1,median))
g_max=sort(apply(exprSet,1,max))
g_min=sort(apply(exprSet,1,min))
g_sd=sort(apply(exprSet,1,sd))
g_var=sort(apply(exprSet,1,var))
g_mad=tail(sort(apply(exprSet,1,mad)),50)

## 9. According to the expression matrix g_mad obtained above, visualizing the matrix with heatmap.
   (heatmap,pheatmap, ggplot2)
# heatmap
chosen_genenames=names(g_mad)
chosen_gene=exprSet[chosen_genenames,]
chosen_gene=t(scale(t(chosen_gene)))
heatmap(chosen_gene)
# pheatmap 
# making annotation_col (rownames of exprSet + group_list)
annotation_col=as.data.frame(group_list)
row.names(annotation_col)=colnames(chosen_gene)
pheatmap(chosen_gene,annotation_col=annotation_col)
# ggplot2
C=as.data.frame(melt(chosen_gene))
# the outcome is an innorm grey picture, but when I use another datafram,the outcome is a norm 
  heatmap,don't figure out reasons
p1<-ggplot(C,aes(x=Var2 ,y=Var1)) 
p2<-p1+geom_tile(aes(fill=value))+
scale_fill_gradient2(low = 'blue', high = 'red', mid = 'white') +
xlab('Sample')+ylab('Gene')

## 10. According to statistics criteria of mean,median,max,min,sd,var and mad, 
       extract top 50 genes from the expression matrix. Using UpSetR to check 
       overlap among them.
g_mean=tail(sort(apply(exprSet,1,mean)), 50)
g_median=tail(sort(apply(exprSet,1,median)), 50)
g_max=tail(sort(apply(exprSet,1,max)), 50)
g_min=tail(sort(apply(exprSet,1,min)), 50)
g_sd=tail(sort(apply(exprSet,1,sd)), 50)
g_var=tail(sort(apply(exprSet,1,var)), 50)
g_mad=tail(sort(apply(exprSet,1,mad)), 50) 
dat=data.frame(g_all=g_all,
               g_mean=ifelse(g_all %in%  names(g_mean) ,1,0), # if gene in g_all is in g_mean, return 1, otherwise return 0
               g_median=ifelse(g_all %in%  names(g_median) ,1,0),
               g_max=ifelse(g_all %in%  names(g_max) ,1,0),
               g_min=ifelse(g_all %in%  names(g_min) ,1,0),
               g_sd=ifelse(g_all %in%  names(g_sd) ,1,0),
               g_var=ifelse(g_all %in%  names(g_var) ,1,0),
               g_mad=ifelse(g_all %in%  names(g_mad) ,1,0))
 upset(dat,nsets = 7)
 
 ## 11. Cluster analysis of the whole expression matrix
 colnames(exprSet)=paste(group_list,1:22,sep='')
 cluster=t(exprSet)
 hc <- hclust(dist(cluster))
 plot(as.dendrogram(hc))
 
 ## 12.PCA analysis
 # method one
 exprSet=exprs(sCLLex)
 pc=prcomp(t(exprSet),scale=TRUE)
 View(pc)
 pcx=as.data.frame(pc$x)
 pcr=cbind(samples=rownames(pcx),group_list, pcx)
 p1=ggplot(pcr, aes(x=PC1, y=PC2,color=pcr$group_list))
 p2=p1+geom_point(size=4,alpha=0.5)+
    geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)+
    stat_ellipse(type="norm",level = 0.8)+ # add ellipsein the graph
    theme(panel.grid.major =element_blank(), # remove the outside grid
    panel.grid.minor = element_line(color = "black"), # set the inner grid as black
    panel.background = element_blank()) # remove the background    
# method two
BiocManager::install("ggfortify")
library(ggfortify)
df=as.data.frame(t(exprSet))
df$group=group_list 
autoplot(prcomp( df[,1:(ncol(df)-1)] ), data=df,colour = 'group', frame=TRUE, frame.type='norm')
# method three
BiocManager::install("FactoMineR")
BiocManager::install("factoextra")
library("FactoMineR")
library("factoextra")
df=as.data.frame(t(exprSet))
dat.pca=PCA(df, graph = FALSE)
fviz_pca_ind(dat.pca, geom.ind = c("point", "text"), # add both point and text
col.ind = group_list, set color accrding to group_list
addEllipses = TRUE,
legend.title="groups")

## 13. t-test of expression matrix
dat=exprSet
# turn the group_list to factors--levels(progress and stable)
group_list=as.factor(group_list)
# divide the expression matrix into two parts--progress and stable
group1 = which(group_list == levels(group_list)[1])
group2 = which(group_list == levels(group_list)[2])
dat1 = dat[, group1]
dat2 = dat[, group2]
dat = cbind(dat1, dat2)
# obtain the p value of the two groups
pvals = apply(exprSet, 1, function(x){t.test(as.numeric(x)~group_list)$p.value})
# adjust the p value with bh
p.adj = p.adjust(pvals, method = "BH")
# caculate log2FC 
avg_1 = rowMeans(dat1)
avg_2 = rowMeans(dat2)
log2FC = avg_2-avg_1
DEG_t.test = cbind(avg_1, avg_2, log2FC, pvals, p.adj)
DEG_t.test=DEG_t.test[order(DEG_t.test[,4]),]
DEG_t.test=as.data.frame(DEG_t.test)

## 14. Using limma package to do variance analysis of expression matrix
# making group matrix, representing progress and stable as 0 and 1, respectively.
design=model.matrix(~0+factor(group_list))
colnames(design)=levels(factor(group_list))
rownames(design)=colnames(exprSet)
# making contrast matrix
contrast.matrix<-makeContrasts(paste0(unique(group_list),collapse = "-"),levels = design)
# variance analysis
fit=lmFit(exprSet,design)
fit2=contrasts.fit(fit, contrast.matrix)
fit2=eBayes(fit2) 
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG = na.omit(tempOutput) 
write.csv(nrDEG,"limma_notrend.results.csv",quote = F)


## Making volcano plot
DEG=nrDEG
# set cutoff value
logFC_cutoff=with(DEG,mean(abs( logFC)) + 2*sd(abs( logFC)))
# judge whether DEG$P.Value < 0.05 and abs(DEG$logFC) > logFC_cutoff：
      if FALSE, retuen "NOT';
      if TRUE, judge whether DEG$logFC > logFC_cutoff:
          if TRUE, return 'UP'
          if FALSE, return 'DOWN'
DEG$change = as.factor(ifelse(DEG$P.Value < 0.05 & abs(DEG$logFC) > logFC_cutoff,
                              ifelse(DEG$logFC > logFC_cutoff ,'UP','DOWN'),'NOT')
this_tile <- paste0('Cutoff for logFC is ',round(logFC_cutoff,3),
                    '\nThe number of up gene is ',nrow(DEG[DEG$change =='UP',]) ,
                    '\nThe number of down gene is ',nrow(DEG[DEG$change =='DOWN',])
g = ggplot(data=DEG, aes(x=logFC, y=-log10(P.Value), color=change))+
    theme_set(theme_bw())+ #set the theme as black-white(grey grid and whihte background)
    scale_colour_manual(values = c('blue','black','red'))
    

